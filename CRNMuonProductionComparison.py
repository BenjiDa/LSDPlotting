# -*- coding: utf-8 -*-
"""
Created on Sat Feb 20 06:17:20 2016

@author: smudd
"""

# This is for plotting the production comparison
# It reads a file generated by the c++ program Production_comparison.cpp


import LSDOSystemTools as LSDost
import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
from matplotlib.gridspec import GridSpec

def get_production_data(Directory):
    
    #Directory = "T://Papers_LaTeX//crn_basinwide_paper//Compiled_results//"
    Dirname = LSDost.ReformatSeperators(Directory)
    Dirname = LSDost.AppendSepToDirectoryPath(Dirname)
    FileName= Dirname+"Muon_production_comparison.csv"
    
    # get rid of the first line of the file
    this_file = open(FileName, 'r')
    lines = this_file.readlines()
    
    values = []
    
    
            
    # get rid of the header
    del lines[0:3]
    
    # now go through the lines, extracting the data
    for line in lines:
        
        # get rid of the control characters
        this_line = LSDost.RemoveEscapeCharacters(line)
            
        # Split the data                       
        split_line = this_line.split(',')
        
        float_vec = []
        for element in split_line:
            float_vec.append(float(element))
            
        values.append(float_vec)
        
    return values
    



def plot_production_rates():

    Directory = "C://basin_data//CosmoPaper//Results//"
    #Directory = "T://Papers_LaTeX//crn_basinwide_paper//Compiled_results//"
    Dirname = LSDost.ReformatSeperators(Directory)
    Dirname = LSDost.AppendSepToDirectoryPath(Dirname)
    
    # get the data
    prod_data = get_production_data(Directory)
    pdata = np.asarray(prod_data)
    
    depth = pdata[:,0]
    mu_CRONUS = pdata[:,1]
    mu_Braucher = pdata[:,4]
    mu_newCRONUS = pdata[:,5]
    
    total_CRONUS = pdata[:,6]
    total_Braucher = pdata[:,9]
    total_newCRONUS = pdata[:,10]    
    
    # set up figure formatting    
    Fileformat = 'svg'
    
    label_size = 10
    axis_size = 12

    # Set up fonts for plots
    rcParams['font.family'] = 'sans-serif'
    rcParams['font.sans-serif'] = ['arial']
    rcParams['font.size'] = label_size
    rcParams['xtick.major.size'] = 4    
    rcParams['ytick.major.size'] = 4
    rcParams['legend.fontsize'] = label_size
    rcParams['legend.handletextpad'] = 0.05
    rcParams['legend.labelspacing'] =0.1
    rcParams['legend.columnspacing'] =0.1
    
    # 3.26 inches = 83 mm, the size of a 1 column figure
    #Fig1 = plt.figure(1, facecolor='white',figsize=(3.26,3.26)) 
    Fig1 = plt.figure(1, facecolor='white',figsize=(6.5,3.26)) 

    # gendepth a grid. 
    gs = GridSpec(100,100,bottom=0.1,left=0.1,right=1.0,top=1.0) 
    ax = Fig1.add_subplot(gs[10:95,2:42])    
    
    ax.plot(mu_CRONUS,depth, "r-", label = "CRONUS",linewidth = 2)
    ax.plot(mu_Braucher,depth, "k-", label = "Braucher",linewidth = 2)
    ax.plot(mu_newCRONUS,depth, "b--", label = "new CRONUS",linewidth = 2)

    ax.spines['top'].set_linewidth(1)
    ax.spines['left'].set_linewidth(1)
    ax.spines['right'].set_linewidth(1)
    ax.spines['bottom'].set_linewidth(1) 
    #ax.tick_params(axis='both', width=2.5)
    ax.set_yscale('log')
    ax.set_ylim([0,10**5])
    ax.invert_yaxis()
    
    # This gets all the ticks, and pads them away from the axis so that the corners don't overlap
    # the which command tells the program to get major and minor ticks 
    ax.tick_params(axis='both', width=1, pad = 1, which = 'both')
    for tick in ax.xaxis.get_major_ticks():
        tick.set_pad(3)   

    for tick in ax.yaxis.get_major_ticks():
        tick.set_pad(3)     

    plt.xlabel('Muon production (atoms g$^{-1}$ yr$^{-1}$)', fontsize = axis_size)
    plt.ylabel('Depth (g cm$^{-2}$)', fontsize = axis_size)
    #plt.title('Cosmocalc / New_code',fontsize = label_size+6)
    handles, labels = ax.get_legend_handles_labels()
    #plt.legend(handles, labels, numpoints = 3, bbox_to_anchor=(0., 1.02, 1., .102), 
    #           loc=4, ncol=1, mode="expand", borderaxespad=0.0)    
    #plt.legend(handles, labels, numpoints = 1, loc=1, ncol=3, mode="expand", borderaxespad=0.0)   
    plt.legend(handles, labels, numpoints = 3, loc=4, ncol=1, borderaxespad=0.5)  
              
    #plt.show()
 
    # 3.26 inches = 83 mm, the size of a 1 column figure
    #Fig2 = plt.figure(1, facecolor='white',figsize=(3.26,3.26))  

    # generate a grid. 
    #gs2 = GridSpec(100,75,bottom=0.13,left=0.13,right=0.90,top=0.95) 
    ax2 = Fig1.add_subplot(gs[10:95,57:97])    
    
    ax2.plot(total_CRONUS,depth, "r-", label = "CRONUS",linewidth = 2)
    ax2.plot(total_Braucher,depth, "k-", label = "Braucher",linewidth = 2)
    ax2.plot(total_newCRONUS,depth, "b--", label = "new CRONUS",linewidth = 2)

    ax2.spines['top'].set_linewidth(1)
    ax2.spines['left'].set_linewidth(1)
    ax2.spines['right'].set_linewidth(1)
    ax2.spines['bottom'].set_linewidth(1) 
    #ax.tick_params(axis='both', width=2.5)
    ax2.set_yscale('log')
    ax2.set_ylim([0,10**3])
    ax2.invert_yaxis()
    
    # This gets all the ticks, and pads them away from the axis so that the corners don't overlap
    # the which command tells the program to get major and minor ticks 
    ax2.tick_params(axis='both', width=1, pad = 1, which = 'both')
    for tick in ax2.xaxis.get_major_ticks():
        tick.set_pad(3)   

    for tick in ax2.yaxis.get_major_ticks():
        tick.set_pad(3)     

    plt.xlabel('Total production (atoms g$^{-1}$ yr$^{-1}$)', fontsize = axis_size)
    plt.ylabel('Depth (g cm$^{-2}$)', fontsize = axis_size)
    #plt.title('Cosmocalc / New_code',fontsize = label_size+6)
    handles, labels = ax2.get_legend_handles_labels()
    #plt.legend(handles, labels, numpoints = 3, bbox_to_anchor=(0., 1.02, 1., .102), 
    #           loc=4, ncol=1, mode="expand", borderaxespad=0.2, fontsize = 8)   
    plt.legend(handles, labels, numpoints = 3, loc=4, ncol=1, borderaxespad=0.5)     

    plt.savefig(Dirname+"MuonProductionComparison.svg",format = Fileformat)     
    plt.show()
    
    
if __name__ == "__main__":
    plot_production_rates()     
    